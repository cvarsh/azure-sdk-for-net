// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    public partial class ConfigurationNameItem
    {
        internal static ConfigurationNameItem DeserializeConfigurationNameItem(JsonElement element)
        {
            Optional<string> targetService = default;
            Optional<LinkerClientType?> clientType = default;
            Optional<LinkerAuthType?> authType = default;
            Optional<IReadOnlyList<ConfigurationName>> names = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("targetService"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                targetService = null;
                                continue;
                            }
                            targetService = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                clientType = null;
                                continue;
                            }
                            clientType = new LinkerClientType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("authType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                authType = null;
                                continue;
                            }
                            authType = new LinkerAuthType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("names"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                names = null;
                                continue;
                            }
                            List<ConfigurationName> array = new List<ConfigurationName>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ConfigurationName.DeserializeConfigurationName(item));
                            }
                            names = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ConfigurationNameItem(targetService.Value, Optional.ToNullable(clientType), Optional.ToNullable(authType), Optional.ToList(names));
        }
    }
}
