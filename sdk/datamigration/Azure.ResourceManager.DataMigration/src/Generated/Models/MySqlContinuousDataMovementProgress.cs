// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.DataMigration.Models
{
    /// <summary> The MySqlContinuousDataMovementProgress. </summary>
    public partial class MySqlContinuousDataMovementProgress
    {
        /// <summary> Initializes a new instance of MySqlContinuousDataMovementProgress. </summary>
        internal MySqlContinuousDataMovementProgress()
        {
        }

        /// <summary> Initializes a new instance of MySqlContinuousDataMovementProgress. </summary>
        /// <param name="binlogPosition"> Current binlog position of the last event committed at target. </param>
        /// <param name="timestamp"> The timestamp exposed by the last binlog event that has been committed at target. </param>
        /// <param name="numberOfRowsInserted"> The total number of rows inserted at target. </param>
        /// <param name="numberOfRowsUpdated"> The total number of rows updated at target. </param>
        /// <param name="numberOfRowsDeleted"> The total number of rows deleted at target. </param>
        /// <param name="numberOfQueryEventsProcessed"> The total number of query events executed at target, such as DDL, or DML when using mixed binlog mode. </param>
        /// <param name="numberOfWriteRowsEventsProcessed"> The the total number of the WRITE_ROWS_EVENTs processed. </param>
        /// <param name="numberOfUpdateRowsEventsProcessed"> The the total number of the UPDATE_ROWS_EVENTs processed. </param>
        /// <param name="numberOfDeleteRowsEventsProcessed"> The total number of the DELETE_ROWS_EVENTs processed. </param>
        /// <param name="secondsBehindSource"> The number of seconds the target server is behind the source server. </param>
        internal MySqlContinuousDataMovementProgress(MySqlBinlogPositionOutput binlogPosition, DateTimeOffset? timestamp, int? numberOfRowsInserted, int? numberOfRowsUpdated, int? numberOfRowsDeleted, int? numberOfQueryEventsProcessed, int? numberOfWriteRowsEventsProcessed, int? numberOfUpdateRowsEventsProcessed, int? numberOfDeleteRowsEventsProcessed, int? secondsBehindSource)
        {
            BinlogPosition = binlogPosition;
            Timestamp = timestamp;
            NumberOfRowsInserted = numberOfRowsInserted;
            NumberOfRowsUpdated = numberOfRowsUpdated;
            NumberOfRowsDeleted = numberOfRowsDeleted;
            NumberOfQueryEventsProcessed = numberOfQueryEventsProcessed;
            NumberOfWriteRowsEventsProcessed = numberOfWriteRowsEventsProcessed;
            NumberOfUpdateRowsEventsProcessed = numberOfUpdateRowsEventsProcessed;
            NumberOfDeleteRowsEventsProcessed = numberOfDeleteRowsEventsProcessed;
            SecondsBehindSource = secondsBehindSource;
        }

        /// <summary> Current binlog position of the last event committed at target. </summary>
        public MySqlBinlogPositionOutput BinlogPosition { get; }
        /// <summary> The timestamp exposed by the last binlog event that has been committed at target. </summary>
        public DateTimeOffset? Timestamp { get; }
        /// <summary> The total number of rows inserted at target. </summary>
        public int? NumberOfRowsInserted { get; }
        /// <summary> The total number of rows updated at target. </summary>
        public int? NumberOfRowsUpdated { get; }
        /// <summary> The total number of rows deleted at target. </summary>
        public int? NumberOfRowsDeleted { get; }
        /// <summary> The total number of query events executed at target, such as DDL, or DML when using mixed binlog mode. </summary>
        public int? NumberOfQueryEventsProcessed { get; }
        /// <summary> The the total number of the WRITE_ROWS_EVENTs processed. </summary>
        public int? NumberOfWriteRowsEventsProcessed { get; }
        /// <summary> The the total number of the UPDATE_ROWS_EVENTs processed. </summary>
        public int? NumberOfUpdateRowsEventsProcessed { get; }
        /// <summary> The total number of the DELETE_ROWS_EVENTs processed. </summary>
        public int? NumberOfDeleteRowsEventsProcessed { get; }
        /// <summary> The number of seconds the target server is behind the source server. </summary>
        public int? SecondsBehindSource { get; }
    }
}
