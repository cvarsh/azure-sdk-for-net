// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MigrateMySqlAzureDBForMySqlOfflineDatabaseInput : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(TargetDatabaseName))
            {
                writer.WritePropertyName("targetDatabaseName");
                writer.WriteStringValue(TargetDatabaseName);
            }
            if (Optional.IsCollectionDefined(TableMap))
            {
                writer.WritePropertyName("tableMap");
                writer.WriteStartObject();
                foreach (var item in TableMap)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(TablesToMigrateSchema))
            {
                writer.WritePropertyName("tablesToMigrateSchema");
                writer.WriteStartObject();
                foreach (var item in TablesToMigrateSchema)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(SelectedViews))
            {
                writer.WritePropertyName("selectedViews");
                writer.WriteStartArray();
                foreach (var item in SelectedViews)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SelectedTriggers))
            {
                writer.WritePropertyName("selectedTriggers");
                writer.WriteStartArray();
                foreach (var item in SelectedTriggers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SelectedRoutines))
            {
                writer.WritePropertyName("selectedRoutines");
                writer.WriteStartArray();
                foreach (var item in SelectedRoutines)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SelectedEvents))
            {
                writer.WritePropertyName("selectedEvents");
                writer.WriteStartArray();
                foreach (var item in SelectedEvents)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static MigrateMySqlAzureDBForMySqlOfflineDatabaseInput DeserializeMigrateMySqlAzureDBForMySqlOfflineDatabaseInput(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> targetDatabaseName = default;
            Optional<IDictionary<string, string>> tableMap = default;
            Optional<IDictionary<string, string>> tablesToMigrateSchema = default;
            Optional<IList<string>> selectedViews = default;
            Optional<IList<string>> selectedTriggers = default;
            Optional<IList<string>> selectedRoutines = default;
            Optional<IList<string>> selectedEvents = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetDatabaseName"))
                {
                    targetDatabaseName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tableMap"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tableMap = dictionary;
                    continue;
                }
                if (property.NameEquals("tablesToMigrateSchema"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tablesToMigrateSchema = dictionary;
                    continue;
                }
                if (property.NameEquals("selectedViews"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    selectedViews = array;
                    continue;
                }
                if (property.NameEquals("selectedTriggers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    selectedTriggers = array;
                    continue;
                }
                if (property.NameEquals("selectedRoutines"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    selectedRoutines = array;
                    continue;
                }
                if (property.NameEquals("selectedEvents"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    selectedEvents = array;
                    continue;
                }
            }
            return new MigrateMySqlAzureDBForMySqlOfflineDatabaseInput(name.Value, targetDatabaseName.Value, Optional.ToDictionary(tableMap), Optional.ToDictionary(tablesToMigrateSchema), Optional.ToList(selectedViews), Optional.ToList(selectedTriggers), Optional.ToList(selectedRoutines), Optional.ToList(selectedEvents));
        }
    }
}
