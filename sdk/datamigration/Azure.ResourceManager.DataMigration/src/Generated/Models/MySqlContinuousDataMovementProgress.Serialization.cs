// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MySqlContinuousDataMovementProgress
    {
        internal static MySqlContinuousDataMovementProgress DeserializeMySqlContinuousDataMovementProgress(JsonElement element)
        {
            Optional<MySqlBinlogPositionOutput> binlogPosition = default;
            Optional<DateTimeOffset> timestamp = default;
            Optional<int> numberOfRowsInserted = default;
            Optional<int> numberOfRowsUpdated = default;
            Optional<int> numberOfRowsDeleted = default;
            Optional<int> numberOfQueryEventsProcessed = default;
            Optional<int> numberOfWriteRowsEventsProcessed = default;
            Optional<int> numberOfUpdateRowsEventsProcessed = default;
            Optional<int> numberOfDeleteRowsEventsProcessed = default;
            Optional<int> secondsBehindSource = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("binlogPosition"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    binlogPosition = MySqlBinlogPositionOutput.DeserializeMySqlBinlogPositionOutput(property.Value);
                    continue;
                }
                if (property.NameEquals("timestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("numberOfRowsInserted"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfRowsInserted = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberOfRowsUpdated"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfRowsUpdated = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberOfRowsDeleted"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfRowsDeleted = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberOfQueryEventsProcessed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfQueryEventsProcessed = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberOfWriteRowsEventsProcessed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfWriteRowsEventsProcessed = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberOfUpdateRowsEventsProcessed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfUpdateRowsEventsProcessed = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberOfDeleteRowsEventsProcessed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfDeleteRowsEventsProcessed = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("secondsBehindSource"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    secondsBehindSource = property.Value.GetInt32();
                    continue;
                }
            }
            return new MySqlContinuousDataMovementProgress(binlogPosition.Value, Optional.ToNullable(timestamp), Optional.ToNullable(numberOfRowsInserted), Optional.ToNullable(numberOfRowsUpdated), Optional.ToNullable(numberOfRowsDeleted), Optional.ToNullable(numberOfQueryEventsProcessed), Optional.ToNullable(numberOfWriteRowsEventsProcessed), Optional.ToNullable(numberOfUpdateRowsEventsProcessed), Optional.ToNullable(numberOfDeleteRowsEventsProcessed), Optional.ToNullable(secondsBehindSource));
        }
    }
}
