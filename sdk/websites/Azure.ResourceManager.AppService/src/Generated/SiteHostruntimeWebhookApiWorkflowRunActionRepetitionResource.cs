// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;

namespace Azure.ResourceManager.AppService
{
    /// <summary>
    /// A Class representing a SiteHostruntimeWebhookApiWorkflowRunActionRepetition along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetSiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource method.
    /// Otherwise you can get one from its parent resource <see cref="WorkflowRunActionResource" /> using the GetSiteHostruntimeWebhookApiWorkflowRunActionRepetition method.
    /// </summary>
    public partial class SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string name, string workflowName, string runName, string actionName, string repetitionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsClientDiagnostics;
        private readonly WorkflowRunActionRepetitionsRestOperations _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsRestClient;
        private readonly WorkflowRunActionRepetitionDefinitionData _data;

        /// <summary> Initializes a new instance of the <see cref="SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource"/> class for mocking. </summary>
        protected SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource(ArmClient client, WorkflowRunActionRepetitionDefinitionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppService", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsApiVersion);
            _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsRestClient = new WorkflowRunActionRepetitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Web/sites/hostruntime/webhooks/api/workflows/runs/actions/repetitions";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual WorkflowRunActionRepetitionDefinitionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of RequestHistoryResources in the SiteHostruntimeWebhookApiWorkflowRunActionRepetition. </summary>
        /// <returns> An object representing collection of RequestHistoryResources and their operations over a RequestHistoryResource. </returns>
        public virtual RequestHistoryCollection GetRequestHistories()
        {
            return GetCachedClient(Client => new RequestHistoryCollection(Client, Id));
        }

        /// <summary>
        /// Gets a workflow run repetition request history.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/requestHistories/{requestHistoryName}
        /// Operation Id: WorkflowRunActionRepetitionsRequestHistories_Get
        /// </summary>
        /// <param name="requestHistoryName"> The request history name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="requestHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="requestHistoryName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<RequestHistoryResource>> GetRequestHistoryAsync(string requestHistoryName, CancellationToken cancellationToken = default)
        {
            return await GetRequestHistories().GetAsync(requestHistoryName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a workflow run repetition request history.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/requestHistories/{requestHistoryName}
        /// Operation Id: WorkflowRunActionRepetitionsRequestHistories_Get
        /// </summary>
        /// <param name="requestHistoryName"> The request history name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="requestHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="requestHistoryName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<RequestHistoryResource> GetRequestHistory(string requestHistoryName, CancellationToken cancellationToken = default)
        {
            return GetRequestHistories().Get(requestHistoryName, cancellationToken);
        }

        /// <summary>
        /// Get a workflow run action repetition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}
        /// Operation Id: WorkflowRunActionRepetitions_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsClientDiagnostics.CreateScope("SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource.Get");
            scope.Start();
            try
            {
                var response = await _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a workflow run action repetition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}
        /// Operation Id: WorkflowRunActionRepetitions_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsClientDiagnostics.CreateScope("SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource.Get");
            scope.Start();
            try
            {
                var response = _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists a workflow run expression trace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/listExpressionTraces
        /// Operation Id: WorkflowRunActionRepetitions_ListExpressionTraces
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExpressionRoot" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExpressionRoot> GetExpressionTracesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ExpressionRoot>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsClientDiagnostics.CreateScope("SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource.GetExpressionTraces");
                scope.Start();
                try
                {
                    var response = await _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsRestClient.ListExpressionTracesAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Inputs, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ExpressionRoot>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsClientDiagnostics.CreateScope("SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource.GetExpressionTraces");
                scope.Start();
                try
                {
                    var response = await _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsRestClient.ListExpressionTracesNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Inputs, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists a workflow run expression trace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/listExpressionTraces
        /// Operation Id: WorkflowRunActionRepetitions_ListExpressionTraces
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExpressionRoot" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExpressionRoot> GetExpressionTraces(CancellationToken cancellationToken = default)
        {
            Page<ExpressionRoot> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsClientDiagnostics.CreateScope("SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource.GetExpressionTraces");
                scope.Start();
                try
                {
                    var response = _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsRestClient.ListExpressionTraces(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Inputs, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ExpressionRoot> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsClientDiagnostics.CreateScope("SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource.GetExpressionTraces");
                scope.Start();
                try
                {
                    var response = _siteHostruntimeWebhookApiWorkflowRunActionRepetitionWorkflowRunActionRepetitionsRestClient.ListExpressionTracesNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Inputs, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
