// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> The expression traces. </summary>
    internal partial class ExpressionTraces
    {
        /// <summary> Initializes a new instance of ExpressionTraces. </summary>
        internal ExpressionTraces()
        {
            Inputs = new ChangeTrackingList<ExpressionRoot>();
        }

        /// <summary> Initializes a new instance of ExpressionTraces. </summary>
        /// <param name="value"> Anything. </param>
        /// <param name="inputs"></param>
        /// <param name="nextLink"> The link used to get the next page of recommendations. </param>
        internal ExpressionTraces(BinaryData value, IReadOnlyList<ExpressionRoot> inputs, string nextLink)
        {
            Value = value;
            Inputs = inputs;
            NextLink = nextLink;
        }

        /// <summary>
        /// Anything
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Value { get; }
        /// <summary> Gets the inputs. </summary>
        public IReadOnlyList<ExpressionRoot> Inputs { get; }
        /// <summary> The link used to get the next page of recommendations. </summary>
        public string NextLink { get; }
    }
}
