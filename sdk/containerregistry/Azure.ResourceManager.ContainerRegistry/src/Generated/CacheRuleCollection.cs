// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ContainerRegistry
{
    /// <summary>
    /// A class representing a collection of <see cref="CacheRuleResource" /> and their operations.
    /// Each <see cref="CacheRuleResource" /> in the collection will belong to the same instance of <see cref="ContainerRegistryResource" />.
    /// To get a <see cref="CacheRuleCollection" /> instance call the GetCacheRules method from an instance of <see cref="ContainerRegistryResource" />.
    /// </summary>
    public partial class CacheRuleCollection : ArmCollection, IEnumerable<CacheRuleResource>, IAsyncEnumerable<CacheRuleResource>
    {
        private readonly ClientDiagnostics _cacheRuleClientDiagnostics;
        private readonly CacheRulesRestOperations _cacheRuleRestClient;

        /// <summary> Initializes a new instance of the <see cref="CacheRuleCollection"/> class for mocking. </summary>
        protected CacheRuleCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CacheRuleCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal CacheRuleCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _cacheRuleClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ContainerRegistry", CacheRuleResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(CacheRuleResource.ResourceType, out string cacheRuleApiVersion);
            _cacheRuleRestClient = new CacheRulesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, cacheRuleApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ContainerRegistryResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ContainerRegistryResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates a cache rule for a container registry with the specified parameters.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}
        /// Operation Id: CacheRules_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cacheRuleName"> The name of the cache rule. </param>
        /// <param name="data"> The parameters for creating a cache rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="cacheRuleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="cacheRuleName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<CacheRuleResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string cacheRuleName, CacheRuleData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cacheRuleName, nameof(cacheRuleName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _cacheRuleClientDiagnostics.CreateScope("CacheRuleCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _cacheRuleRestClient.CreateAsync(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, cacheRuleName, data, cancellationToken).ConfigureAwait(false);
                var operation = new ContainerRegistryArmOperation<CacheRuleResource>(new CacheRuleOperationSource(Client), _cacheRuleClientDiagnostics, Pipeline, _cacheRuleRestClient.CreateCreateRequest(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, cacheRuleName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates a cache rule for a container registry with the specified parameters.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}
        /// Operation Id: CacheRules_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cacheRuleName"> The name of the cache rule. </param>
        /// <param name="data"> The parameters for creating a cache rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="cacheRuleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="cacheRuleName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<CacheRuleResource> CreateOrUpdate(WaitUntil waitUntil, string cacheRuleName, CacheRuleData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cacheRuleName, nameof(cacheRuleName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _cacheRuleClientDiagnostics.CreateScope("CacheRuleCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _cacheRuleRestClient.Create(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, cacheRuleName, data, cancellationToken);
                var operation = new ContainerRegistryArmOperation<CacheRuleResource>(new CacheRuleOperationSource(Client), _cacheRuleClientDiagnostics, Pipeline, _cacheRuleRestClient.CreateCreateRequest(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, cacheRuleName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the properties of the specified cache rule resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}
        /// Operation Id: CacheRules_Get
        /// </summary>
        /// <param name="cacheRuleName"> The name of the cache rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="cacheRuleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="cacheRuleName"/> is null. </exception>
        public virtual async Task<Response<CacheRuleResource>> GetAsync(string cacheRuleName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cacheRuleName, nameof(cacheRuleName));

            using var scope = _cacheRuleClientDiagnostics.CreateScope("CacheRuleCollection.Get");
            scope.Start();
            try
            {
                var response = await _cacheRuleRestClient.GetAsync(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, cacheRuleName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CacheRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the properties of the specified cache rule resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}
        /// Operation Id: CacheRules_Get
        /// </summary>
        /// <param name="cacheRuleName"> The name of the cache rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="cacheRuleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="cacheRuleName"/> is null. </exception>
        public virtual Response<CacheRuleResource> Get(string cacheRuleName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cacheRuleName, nameof(cacheRuleName));

            using var scope = _cacheRuleClientDiagnostics.CreateScope("CacheRuleCollection.Get");
            scope.Start();
            try
            {
                var response = _cacheRuleRestClient.Get(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, cacheRuleName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CacheRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all cache rule resources for the specified container registry.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules
        /// Operation Id: CacheRules_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CacheRuleResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CacheRuleResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _cacheRuleRestClient.CreateListRequest(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _cacheRuleRestClient.CreateListNextPageRequest(nextLink, Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new CacheRuleResource(Client, CacheRuleData.DeserializeCacheRuleData(e)), _cacheRuleClientDiagnostics, Pipeline, "CacheRuleCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all cache rule resources for the specified container registry.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules
        /// Operation Id: CacheRules_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CacheRuleResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CacheRuleResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _cacheRuleRestClient.CreateListRequest(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _cacheRuleRestClient.CreateListNextPageRequest(nextLink, Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new CacheRuleResource(Client, CacheRuleData.DeserializeCacheRuleData(e)), _cacheRuleClientDiagnostics, Pipeline, "CacheRuleCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}
        /// Operation Id: CacheRules_Get
        /// </summary>
        /// <param name="cacheRuleName"> The name of the cache rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="cacheRuleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="cacheRuleName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string cacheRuleName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cacheRuleName, nameof(cacheRuleName));

            using var scope = _cacheRuleClientDiagnostics.CreateScope("CacheRuleCollection.Exists");
            scope.Start();
            try
            {
                var response = await _cacheRuleRestClient.GetAsync(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, cacheRuleName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}
        /// Operation Id: CacheRules_Get
        /// </summary>
        /// <param name="cacheRuleName"> The name of the cache rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="cacheRuleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="cacheRuleName"/> is null. </exception>
        public virtual Response<bool> Exists(string cacheRuleName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cacheRuleName, nameof(cacheRuleName));

            using var scope = _cacheRuleClientDiagnostics.CreateScope("CacheRuleCollection.Exists");
            scope.Start();
            try
            {
                var response = _cacheRuleRestClient.Get(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, cacheRuleName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<CacheRuleResource> IEnumerable<CacheRuleResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<CacheRuleResource> IAsyncEnumerable<CacheRuleResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
