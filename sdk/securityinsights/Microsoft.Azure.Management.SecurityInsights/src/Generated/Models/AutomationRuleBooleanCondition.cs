// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AutomationRuleBooleanCondition
    {
        /// <summary>
        /// Initializes a new instance of the AutomationRuleBooleanCondition
        /// class.
        /// </summary>
        public AutomationRuleBooleanCondition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AutomationRuleBooleanCondition
        /// class.
        /// </summary>
        /// <param name="operatorProperty">Possible values include: 'And',
        /// 'Or'</param>
        public AutomationRuleBooleanCondition(string operatorProperty = default(string), IList<AutomationRuleCondition> innerConditions = default(IList<AutomationRuleCondition>))
        {
            OperatorProperty = operatorProperty;
            InnerConditions = innerConditions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'And', 'Or'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public string OperatorProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "innerConditions")]
        public IList<AutomationRuleCondition> InnerConditions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (InnerConditions != null)
            {
                if (InnerConditions.Count > 10)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "InnerConditions", 10);
                }
                if (InnerConditions.Count < 2)
                {
                    throw new ValidationException(ValidationRules.MinItems, "InnerConditions", 2);
                }
            }
        }
    }
}
