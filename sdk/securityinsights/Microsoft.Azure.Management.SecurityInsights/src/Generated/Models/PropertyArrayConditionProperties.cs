// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes an automation rule condition that evaluates an array
    /// property's value
    /// </summary>
    [Newtonsoft.Json.JsonObject("PropertyArray")]
    public partial class PropertyArrayConditionProperties : AutomationRuleCondition
    {
        /// <summary>
        /// Initializes a new instance of the PropertyArrayConditionProperties
        /// class.
        /// </summary>
        public PropertyArrayConditionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PropertyArrayConditionProperties
        /// class.
        /// </summary>
        public PropertyArrayConditionProperties(AutomationRulePropertyArrayValuesCondition conditionProperties = default(AutomationRulePropertyArrayValuesCondition))
        {
            ConditionProperties = conditionProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "conditionProperties")]
        public AutomationRulePropertyArrayValuesCondition ConditionProperties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConditionProperties != null)
            {
                ConditionProperties.Validate();
            }
        }
    }
}
