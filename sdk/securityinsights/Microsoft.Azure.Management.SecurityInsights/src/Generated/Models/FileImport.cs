// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a file import in Azure Security Insights.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class FileImport : Resource
    {
        /// <summary>
        /// Initializes a new instance of the FileImport class.
        /// </summary>
        public FileImport()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileImport class.
        /// </summary>
        /// <param name="ingestionMode">Describes how to ingest the records in
        /// the file. Possible values include: 'IngestOnlyIfAllAreValid',
        /// 'IngestAnyValidRecords', 'Unspecified'</param>
        /// <param name="contentType">The content type of this file. Possible
        /// values include: 'BasicIndicator', 'StixIndicator',
        /// 'Unspecified'</param>
        /// <param name="importFile">Represents the imported file.</param>
        /// <param name="source">The source for the data in the file.</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="createdTimeUTC">The time the file was
        /// imported.</param>
        /// <param name="errorFile">Represents the error file (if the import
        /// was ingested with errors or failed the validation).</param>
        /// <param name="errorsPreview">An ordered list of some of the errors
        /// that were encountered during validation.</param>
        /// <param name="ingestedRecordCount">The number of records that have
        /// been successfully ingested.</param>
        /// <param name="state">The state of the file import. Possible values
        /// include: 'FatalError', 'Ingested', 'IngestedWithErrors',
        /// 'InProgress', 'Invalid', 'WaitingForUpload', 'Unspecified'</param>
        /// <param name="totalRecordCount">The number of records in the
        /// file.</param>
        /// <param name="validRecordCount">The number of records that have
        /// passed validation.</param>
        /// <param name="filesValidUntilTimeUTC">The time the files associated
        /// with this import are deleted from the storage account.</param>
        /// <param name="importValidUntilTimeUTC">The time the file import
        /// record is soft deleted from the database and history.</param>
        public FileImport(string ingestionMode, string contentType, FileMetadata importFile, string source, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), System.DateTime? createdTimeUTC = default(System.DateTime?), FileMetadata errorFile = default(FileMetadata), IList<ValidationError> errorsPreview = default(IList<ValidationError>), int? ingestedRecordCount = default(int?), string state = default(string), int? totalRecordCount = default(int?), int? validRecordCount = default(int?), System.DateTime? filesValidUntilTimeUTC = default(System.DateTime?), System.DateTime? importValidUntilTimeUTC = default(System.DateTime?))
            : base(id, name, type, systemData)
        {
            IngestionMode = ingestionMode;
            ContentType = contentType;
            CreatedTimeUTC = createdTimeUTC;
            ErrorFile = errorFile;
            ErrorsPreview = errorsPreview;
            ImportFile = importFile;
            IngestedRecordCount = ingestedRecordCount;
            Source = source;
            State = state;
            TotalRecordCount = totalRecordCount;
            ValidRecordCount = validRecordCount;
            FilesValidUntilTimeUTC = filesValidUntilTimeUTC;
            ImportValidUntilTimeUTC = importValidUntilTimeUTC;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets describes how to ingest the records in the file.
        /// Possible values include: 'IngestOnlyIfAllAreValid',
        /// 'IngestAnyValidRecords', 'Unspecified'
        /// </summary>
        [JsonProperty(PropertyName = "properties.ingestionMode")]
        public string IngestionMode { get; set; }

        /// <summary>
        /// Gets or sets the content type of this file. Possible values
        /// include: 'BasicIndicator', 'StixIndicator', 'Unspecified'
        /// </summary>
        [JsonProperty(PropertyName = "properties.contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets the time the file was imported.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdTimeUTC")]
        public System.DateTime? CreatedTimeUTC { get; private set; }

        /// <summary>
        /// Gets represents the error file (if the import was ingested with
        /// errors or failed the validation).
        /// </summary>
        [JsonProperty(PropertyName = "properties.errorFile")]
        public FileMetadata ErrorFile { get; private set; }

        /// <summary>
        /// Gets an ordered list of some of the errors that were encountered
        /// during validation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.errorsPreview")]
        public IList<ValidationError> ErrorsPreview { get; private set; }

        /// <summary>
        /// Gets or sets represents the imported file.
        /// </summary>
        [JsonProperty(PropertyName = "properties.importFile")]
        public FileMetadata ImportFile { get; set; }

        /// <summary>
        /// Gets the number of records that have been successfully ingested.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ingestedRecordCount")]
        public int? IngestedRecordCount { get; private set; }

        /// <summary>
        /// Gets or sets the source for the data in the file.
        /// </summary>
        [JsonProperty(PropertyName = "properties.source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets the state of the file import. Possible values include:
        /// 'FatalError', 'Ingested', 'IngestedWithErrors', 'InProgress',
        /// 'Invalid', 'WaitingForUpload', 'Unspecified'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets the number of records in the file.
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalRecordCount")]
        public int? TotalRecordCount { get; private set; }

        /// <summary>
        /// Gets the number of records that have passed validation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.validRecordCount")]
        public int? ValidRecordCount { get; private set; }

        /// <summary>
        /// Gets the time the files associated with this import are deleted
        /// from the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.filesValidUntilTimeUTC")]
        public System.DateTime? FilesValidUntilTimeUTC { get; private set; }

        /// <summary>
        /// Gets the time the file import record is soft deleted from the
        /// database and history.
        /// </summary>
        [JsonProperty(PropertyName = "properties.importValidUntilTimeUTC")]
        public System.DateTime? ImportValidUntilTimeUTC { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IngestionMode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IngestionMode");
            }
            if (ContentType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentType");
            }
            if (ImportFile == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ImportFile");
            }
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
        }
    }
}
