// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The assignment job
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Job : ResourceWithEtag
    {
        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        public Job()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        /// <param name="provisioningState">State of the job. Possible values
        /// include: 'Succeeded', 'Canceled', 'InProgress', 'Failed'</param>
        /// <param name="startTime">The time the job started</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="etag">Etag of the azure resource</param>
        /// <param name="endTime">The time the job completed</param>
        /// <param name="items">List of items published by the job</param>
        /// <param name="errorMessage">Message to describe error, if an error
        /// exists</param>
        public Job(string provisioningState, System.DateTime startTime, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string etag = default(string), System.DateTime? endTime = default(System.DateTime?), IList<JobItem> items = default(IList<JobItem>), string errorMessage = default(string))
            : base(id, name, type, systemData, etag)
        {
            EndTime = endTime;
            Items = items;
            ProvisioningState = provisioningState;
            StartTime = startTime;
            ErrorMessage = errorMessage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the time the job completed
        /// </summary>
        [JsonProperty(PropertyName = "properties.endTime")]
        public System.DateTime? EndTime { get; private set; }

        /// <summary>
        /// Gets or sets list of items published by the job
        /// </summary>
        [JsonProperty(PropertyName = "properties.items")]
        public IList<JobItem> Items { get; set; }

        /// <summary>
        /// Gets or sets state of the job. Possible values include:
        /// 'Succeeded', 'Canceled', 'InProgress', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the time the job started
        /// </summary>
        [JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or sets message to describe error, if an error exists
        /// </summary>
        [JsonProperty(PropertyName = "properties.errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ProvisioningState == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProvisioningState");
            }
        }
    }
}
