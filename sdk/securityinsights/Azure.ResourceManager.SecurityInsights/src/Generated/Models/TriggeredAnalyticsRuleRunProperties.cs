// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> The TriggeredAnalyticsRuleRunProperties. </summary>
    public partial class TriggeredAnalyticsRuleRunProperties
    {
        /// <summary> Initializes a new instance of TriggeredAnalyticsRuleRunProperties. </summary>
        /// <param name="executionTimeUtc"></param>
        /// <param name="ruleId"></param>
        /// <param name="triggeredAnalyticsRuleRunId"></param>
        /// <param name="provisioningState"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="triggeredAnalyticsRuleRunId"/> is null. </exception>
        public TriggeredAnalyticsRuleRunProperties(DateTimeOffset executionTimeUtc, string ruleId, string triggeredAnalyticsRuleRunId, ProvisioningState provisioningState)
        {
            Argument.AssertNotNull(ruleId, nameof(ruleId));
            Argument.AssertNotNull(triggeredAnalyticsRuleRunId, nameof(triggeredAnalyticsRuleRunId));

            ExecutionTimeUtc = executionTimeUtc;
            RuleId = ruleId;
            TriggeredAnalyticsRuleRunId = triggeredAnalyticsRuleRunId;
            ProvisioningState = provisioningState;
            RuleRunAdditionalData = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of TriggeredAnalyticsRuleRunProperties. </summary>
        /// <param name="executionTimeUtc"></param>
        /// <param name="ruleId"></param>
        /// <param name="triggeredAnalyticsRuleRunId"></param>
        /// <param name="provisioningState"></param>
        /// <param name="ruleRunAdditionalData"> Dictionary of &lt;any&gt;. </param>
        internal TriggeredAnalyticsRuleRunProperties(DateTimeOffset executionTimeUtc, string ruleId, string triggeredAnalyticsRuleRunId, ProvisioningState provisioningState, IDictionary<string, BinaryData> ruleRunAdditionalData)
        {
            ExecutionTimeUtc = executionTimeUtc;
            RuleId = ruleId;
            TriggeredAnalyticsRuleRunId = triggeredAnalyticsRuleRunId;
            ProvisioningState = provisioningState;
            RuleRunAdditionalData = ruleRunAdditionalData;
        }

        /// <summary> Gets or sets the execution time utc. </summary>
        public DateTimeOffset ExecutionTimeUtc { get; set; }
        /// <summary> Gets or sets the rule id. </summary>
        public string RuleId { get; set; }
        /// <summary> Gets or sets the triggered analytics rule run id. </summary>
        public string TriggeredAnalyticsRuleRunId { get; set; }
        /// <summary> Gets or sets the provisioning state. </summary>
        public ProvisioningState ProvisioningState { get; set; }
        /// <summary>
        /// Dictionary of &lt;any&gt;
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> RuleRunAdditionalData { get; }
    }
}
